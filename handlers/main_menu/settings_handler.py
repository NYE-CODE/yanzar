from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State
from aiogram.dispatcher.filters import Text
from aiogram import types
from config.bot_config import dp, bot, BotConfig
from keyboards.back_keyboard import back_keyboard
from keyboards.settings_keyboard import settings_inline_buttons, cancel_keyboard
from aiogram.dispatcher import FSMContext
from keyboards.menu_keyboard import generate_main_keyboard
from aiogram.types import CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from sqlite_db import post_employee, update_employee, get_all_employees, delete_employee

storage = MemoryStorage()
dp.storage = storage


class SettingsStates(StatesGroup):
    employee_name = State()
    employee_status = State()
    employee_telegram = State()


class SettingsEditStates(StatesGroup):
    employee_name = State()
    employee_status = State()


class SettingsDeleteStates(StatesGroup):
    employee_name = State()

@dp.message_handler(Text(equals="–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô"))
async def choose_segway_action(message: types.Message):
    await message.answer("–í—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫–µ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'",
                         reply_markup=settings_inline_buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:",
                         reply_markup=back_keyboard)


@dp.message_handler(Text(equals=["–ù–∞–∑–∞–¥ üîô"]), state="*")
async def back_commands(message: types.Message, state: FSMContext):
    if state:
        await state.reset_state()

    last_message = message.message_id - 2
    await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message)

    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    exit_message = "–í—ã –≤—ã—à–ª–∏ –∏–∑ –≤–∫–ª–∞–¥–∫–∏ '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ ‚öô'"
    await message.answer(exit_message, reply_markup=main_keyboard)


@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå"), state="*")
async def cancel_command(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.reset_state()
    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –í–∞–º–∏ –ø—Ä–µ—Ä–≤–∞–Ω!", reply_markup=main_keyboard)


@dp.callback_query_handler(Text(equals=["add_employee"]))
async def create_employee_name(callback: CallbackQuery):
    chat_id = callback.message.chat.id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)

    await callback.bot.send_message(chat_id, '–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω 1/3 '
                                             '\n–í–≤–µ–¥–∏—Ç–µ –∏–º—è –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:', reply_markup=cancel_keyboard)
    await SettingsStates.employee_name.set()


@dp.callback_query_handler(Text(equals=["edit_employee"]))
async def choose_employee(callback: types.CallbackQuery):
    buttons = await get_all_employees()
    if not buttons:
        await callback.message.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup()

    for employee_name, telegram_id, employee_status in buttons:
        button_text = f"{employee_name}, –∏–¥: {telegram_id}, —Å—Ç–∞—Ç—É—Å: {employee_status}."
        callback_data = f"button_{employee_name}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    await callback.message.edit_text('–ü—Ä–æ—Ü–µ—Å—Å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω 1/2'
                                     '\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=keyboard)
    await SettingsEditStates.employee_name.set()


@dp.message_handler(state=SettingsStates.employee_name)
async def process_employee_name(message: types.Message):
    async with FSMContext(storage=storage, chat=message.chat.id, user=message.from_user.id).proxy() as data:
        data["employee_name"] = message.text

    await message.answer('–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω 2/3'
                         '\n–í–≤–µ–¥–∏—Ç–µ 0 - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –±–µ–∑ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, 1 - —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ —Å –ø—Ä–∞–≤–∞–º–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:')
    await SettingsStates.employee_status.set()


@dp.message_handler(lambda message: message.text not in ('0', '1'), state=SettingsStates.employee_status)
@dp.message_handler(lambda message: message.text not in ('0', '1'), state=SettingsEditStates.employee_status)
async def checking_input_status(message: types.Message):
    return await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ 0 –∏–ª–∏ 1!")


@dp.message_handler(state=SettingsStates.employee_status)
async def process_employee_status(message: types.Message):
    async with FSMContext(storage=storage, chat=message.chat.id, user=message.from_user.id).proxy() as data:
        data["status"] = message.text

    await message.answer('–ü—Ä–æ—Ü–µ—Å—Å –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω 3/3'
                         '\n–í–≤–µ–¥–∏—Ç–µ telegram id —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:')
    await SettingsStates.employee_telegram.set()


@dp.message_handler(lambda message: not message.text.isdigit(), state=SettingsStates.employee_telegram)
async def checking_input_telegram_id(message: types.Message):
    return await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")


@dp.message_handler(state=SettingsStates.employee_telegram)
async def add_telegram(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data["telegram_id"] = message.text
        employee_name = data["employee_name"]
        status = int(data["status"])
        telegram_id = int(data["telegram_id"])

    await post_employee(employee_name, status, telegram_id)

    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {employee_name} {telegram_id} —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º {status}"
                         f"\n–±—ã–ª —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!",
                         reply_markup=main_keyboard)
    await state.finish()


# –ö–æ–¥ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('button_'),
                           state=SettingsEditStates.employee_name)
async def process_employee_change(callback_query: CallbackQuery, state: FSMContext):
    button_id = callback_query.data.replace('button_', '')

    async with state.proxy() as data:
        data["employee_name"] = button_id

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

    await callback_query.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:', reply_markup=cancel_keyboard)
    await SettingsEditStates.employee_status.set()


@dp.message_handler(state=SettingsEditStates.employee_status)
async def edit_employee_status(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        name = data["employee_name"]
        status = int(message.text)  # –ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ –≤ —á–∏—Å–ª–æ

    await update_employee(name, status)

    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer(f"–°–æ—Ç—Ä—É–¥–Ω–∏–∫ {name} –æ–±–Ω–æ–≤–ª–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}.",
                         reply_markup=main_keyboard)
    await state.finish()



@dp.callback_query_handler(Text(equals=["delete_employee"]))
async def choose_delete_employee(callback: types.CallbackQuery):
    buttons = await get_all_employees()
    if not buttons:
        await callback.message.answer("–ù–µ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤.")
        return

    keyboard = InlineKeyboardMarkup()

    for employee_name, telegram_id, employee_status in buttons:
        button_text = f"{employee_name}, –∏–¥: {telegram_id}, —Å—Ç–∞—Ç—É—Å: {employee_status}."
        callback_data = f"button_{employee_name}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    await callback.message.edit_text('–ü—Ä–æ—Ü–µ—Å—Å —É–¥–∞–ª–µ–Ω–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∑–∞–ø—É—â–µ–Ω'
                                     '\n–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –∏–∑ —Å–ø–∏—Å–∫–∞:', reply_markup=keyboard)
    await SettingsDeleteStates.employee_name.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('button_'),
                           state=SettingsDeleteStates.employee_name)
async def delete_employee_callback(callback_query: CallbackQuery, state: FSMContext):
    button_id = callback_query.data.replace('button_', '')

    await delete_employee(button_id)

    await bot.delete_message(chat_id=callback_query.message.chat.id, message_id=callback_query.message.message_id)

    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await bot.send_message(chat_id=callback_query.message.chat.id, text="–°–æ—Ç—Ä—É–¥–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω.", reply_markup=main_keyboard)
    await state.finish()
