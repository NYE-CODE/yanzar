from datetime import datetime
import os
from aiogram import types
from aiogram.types import ParseMode
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher import FSMContext
from aiogram.types import InputFile
from aiogram.types import InlineKeyboardMarkup, CallbackQuery
from keyboards.menu_keyboard import generate_main_keyboard
from keyboards.back_keyboard import back_keyboard
from config.bot_config import dp, BotConfig
from sqlite_db import get_monthly_rentals
import pandas as pd
from io import BytesIO


@dp.message_handler(Text(equals="–û—Ç—á–µ—Ç—ã üóíÔ∏è"))
async def view_rentals(message: types.Message):
    try:
        rentals = await get_monthly_rentals()
        if not rentals:
            await message.answer("–°–µ–≥–æ–¥–Ω—è –Ω–µ –±—ã–ª–æ –ø—Ä–æ–∫–∞—Ç–∞.")
            return

        download_keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [dict(text="–°–∫–∞—á–∞—Ç—å", callback_data="download_sheet")]
            ]
        )

        await message.answer("–ù–∞–∂–º–∏—Ç–µ, —á—Ç–æ–±—ã —Å–∫–∞—á–∞—Ç—å —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏.", parse_mode=ParseMode.MARKDOWN,
                             reply_markup=download_keyboard)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:", reply_markup=back_keyboard)

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")







@dp.callback_query_handler(Text(equals=["download_sheet"]))
async def download_sheet(callback: CallbackQuery):
    try:
        rentals = await get_monthly_rentals()
        data = await format_rental_info(rentals)

        # –°–æ–∑–¥–∞–Ω–∏–µ DataFrame –∏–∑ –¥–∞–Ω–Ω—ã—Ö
        columns = ['–ê—Ä–µ–Ω–¥–∞ ID', '–ù–∞–∑–≤–∞–Ω–∏–µ –ê—Ä–µ–Ω–¥—ã', '–ù–∞—á–∞–ª–æ –ê—Ä–µ–Ω–¥—ã', '–ö–æ–Ω–µ—Ü –ê—Ä–µ–Ω–¥—ã', '–°—Ç–∞—Ç—É—Å –ê—Ä–µ–Ω–¥—ã',
                   '–°—É–º–º–∞ –î–µ–ø–æ–∑–∏—Ç–∞', '–°–∏–≥–≤–µ–π', '–û–ø–∏—Å–∞–Ω–∏–µ –û—Ç–º–µ–Ω—ã', '–°—É–º–º–∞ –í–æ–∑–≤—Ä–∞—Ç–∞']

        df = pd.DataFrame(data, columns=columns)

        # –°–æ–∑–¥–∞–Ω–∏–µ –±—É—Ñ–µ—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è Excel-—Ñ–∞–π–ª–∞
        excel_buffer = BytesIO()

        # –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ ExcelWriter
        with pd.ExcelWriter(excel_buffer, engine='xlsxwriter', datetime_format='yyyy-mm-dd',
                            date_format='yyyy-mm-dd') as writer:
            df.to_excel(writer, index=False, sheet_name='Sheet1')

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ workbook –∏ worksheet
            workbook = writer.book
            worksheet = writer.sheets['Sheet1']

            # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —à–∏—Ä–∏–Ω—ã —Å—Ç–æ–ª–±—Ü–æ–≤ —Ä–∞–≤–Ω–æ–π –¥–ª–∏–Ω–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç–æ–ª–±—Ü–æ–≤
            for col_num, value in enumerate(columns):
                column_len = max(df[value].astype(str).apply(len).max(), len(value))
                worksheet.set_column(col_num, col_num, column_len)

        # –°–±—Ä–æ—Å –∫—É—Ä—Å–æ—Ä–∞ –≤ –Ω–∞—á–∞–ª–æ –±—É—Ñ–µ—Ä–∞
        excel_buffer.seek(0)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã
        current_date = datetime.now().strftime("%Y-%m-%d")

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
        excel_filename = f'–æ—Ç—á–µ—Ç –∑–∞ {current_date}.XLSX'

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await callback.bot.send_document(chat_id=callback.from_user.id,
                                         document=InputFile(excel_buffer, filename=excel_filename),
                                         caption=excel_filename)

    except Exception as e:
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥ üîô"), state="*")
async def back_command(message: types.Message, state: FSMContext):
    if state is not None:
        await state.reset_state()

    last_message = message.message_id - 2
    await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message)
    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ '–û—Ç—á–µ—Ç –∑–∞ —Å–µ–≥–æ–¥–Ω—è'", reply_markup=main_keyboard)


async def format_rental_info(rentals):
    formatted_rentals = []
    for rental in rentals:
        formatted_rental = {
            '–ê—Ä–µ–Ω–¥–∞ ID': rental[0],
            '–ù–∞–∑–≤–∞–Ω–∏–µ –ê—Ä–µ–Ω–¥—ã': rental[1],
            '–ù–∞—á–∞–ª–æ –ê—Ä–µ–Ω–¥—ã': rental[2],
            '–ö–æ–Ω–µ—Ü –ê—Ä–µ–Ω–¥—ã': rental[3],
            '–°—Ç–∞—Ç—É—Å –ê—Ä–µ–Ω–¥—ã': rental[4],
            '–°—É–º–º–∞ –î–µ–ø–æ–∑–∏—Ç–∞': rental[5],
            '–°–∏–≥–≤–µ–π': rental[6],
            '–û–ø–∏—Å–∞–Ω–∏–µ –û—Ç–º–µ–Ω—ã': rental[7] or "–ù–µ—Ç –æ—Ç–º–µ–Ω—ã",
            '–°—É–º–º–∞ –í–æ–∑–≤—Ä–∞—Ç–∞': rental[8] or 0
        }
        formatted_rentals.append(formatted_rental)

    return formatted_rentals

