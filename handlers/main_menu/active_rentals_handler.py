import asyncio
from datetime import datetime, timedelta
from aiogram import types
from aiogram.types import ParseMode, CallbackQuery, InlineKeyboardButton, \
    InlineKeyboardMarkup
from aiogram.dispatcher.filters import Text
from aiogram.dispatcher.filters.state import State, StatesGroup
from aiogram.dispatcher import FSMContext
from keyboards.back_keyboard import back_keyboard
from keyboards.menu_keyboard import generate_main_keyboard
from keyboards.rental_keyboard import generate_rentals_keyboard
from config.bot_config import dp, bot, BotConfig
from sqlite_db import (
    get_active_rentals, finish_rental_request, get_segway_price, post_extension_rental, cancel_rental, get_free_segways,
    change_rental_request, get_segway_price_id, finish_rental_recalculate_request
)


class ViewRental(StatesGroup):
    View = State()
    Extension = State()
    Cancel_description = State()
    Equipment = State()


# Message handler for cancel command
@dp.message_handler(Text(equals="–û—Ç–º–µ–Ω–∏—Ç—å ‚ùå"), state="*")
async def cancel_command(message: types.Message, state: FSMContext):
    if state is None:
        return

    await state.reset_state()
    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer("–ü—Ä–æ—Ü–µ—Å—Å –±—ã–ª –í–∞–º–∏ –ø—Ä–µ—Ä–≤–∞–Ω!", reply_markup=main_keyboard)


@dp.message_handler(Text(equals="–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ–∫–∞—Ç üëÄÔ∏è"))
async def view_rentals(message: types.Message, state: FSMContext):
    try:
        rentals = await get_active_rentals()
        if not rentals:
            await message.answer("–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞—Ä–µ–Ω–¥.")
            return

        async with state.proxy() as state_data:
            state_data.update({
                'rentals': rentals,
                'current_index': 0,
                'total_count': len(rentals)
            })

        current_index = state_data['current_index']
        status = rentals[current_index][-1]

        rental_info = await format_rental_info(rentals, current_index)
        markup = await generate_rentals_keyboard(current_index, len(rentals), status)

        await message.answer(rental_info, parse_mode=ParseMode.MARKDOWN, reply_markup=markup)
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–ª–∏ –≤–µ—Ä–Ω–∏—Ç–µ—Å—å –Ω–∞–∑–∞–¥:", reply_markup=back_keyboard)
        await ViewRental.next()

    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        print(f"–û—à–∏–±–∫–∞: {e}")


@dp.message_handler(Text(equals="–ù–∞–∑–∞–¥ üîô"), state="*")
async def back_command(message: types.Message, state: FSMContext):
    if state is not None:
        await state.reset_state()

    last_message = message.message_id - 2
    await message.bot.delete_message(chat_id=message.chat.id, message_id=last_message)
    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ —Å–ø–∏—Å–∫–∞ –∞—Ä–µ–Ω–¥", reply_markup=main_keyboard)


async def format_rental_info(rentals, current_index):
    rental = rentals[current_index]
    rental_id, rental_name, segway_name, start_time, end_time, \
    status, total_price = rental

    def parse_datetime(dt_str):
        format_str = '%Y-%m-%d %H:%M:%S.%f' if '.' in dt_str else '%Y-%m-%d %H:%M:%S'
        return datetime.strptime(dt_str, format_str) if dt_str else None

    start_datetime = parse_datetime(start_time)
    end_datetime = parse_datetime(end_time)

    start_formatted = start_datetime.strftime('%d.%m.%Y %H:%M') if start_datetime else "-"
    end_formatted = end_datetime.strftime('%d.%m.%Y %H:%M') if end_datetime else "-"

    rental_info = (
        f"–ü—Ä–æ–∫–∞—Ç ‚Ññ{rental_id}\n"
        f"–ù–∞–∑–≤–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã: {rental_name}\n"
        f"–°–∏–≥–≤–µ–π: {segway_name}\n"
        f"–ù–∞—á–∞–ª–æ –∞—Ä–µ–Ω–¥—ã: {start_formatted}\n"
        f"–û–∫–æ–Ω—á–∞–Ω–∏–µ –∞—Ä–µ–Ω–¥—ã: {end_formatted}\n"
        f"–°—É–º–º–∞: {total_price} —Ä—É–±.\n"
        f"–°—Ç–∞—Ç—É—Å: {status}\n"
    )

    return rental_info


@dp.callback_query_handler(Text(equals=["prev_rental", "next_rental"]), state=ViewRental.View)
async def switch_rental(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    current_index, rentals, total_count = data['current_index'], data['rentals'], data['total_count']

    if not rentals:
        return

    if callback.data == 'prev_rental':
        current_index = (current_index - 1) % len(rentals)
    elif callback.data == 'next_rental':
        current_index = (current_index + 1) % len(rentals)

    status = rentals[current_index][-1]
    markup = await generate_rentals_keyboard(current_index, total_count, status)

    rental_info = await format_rental_info(rentals, current_index)

    async with state.proxy() as state_data:
        state_data['current_index'] = current_index

    if rental_info != callback.message.text:
        await callback.message.edit_text(rental_info, parse_mode=ParseMode.MARKDOWN, reply_markup=markup)
        await asyncio.sleep(0.1)


@dp.callback_query_handler(Text(equals="finish_rental"), state=ViewRental.View)
async def handle_finish_rental(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    rentals, current_index = data['rentals'], data['current_index']
    rental_id = rentals[current_index][0]

    # Generate inline keyboard with two options: "Recalculate" and "Finish"
    keyboard = InlineKeyboardMarkup()
    keyboard.add(InlineKeyboardButton(text="–° –ø–µ—Ä–µ—Å—á–µ—Ç–æ–º", callback_data="finish_with_recalculation"))
    keyboard.add(InlineKeyboardButton(text="–ë–µ–∑ –ø–µ—Ä–µ—Å—á–µ—Ç–∞", callback_data="finish_without_recalculation"))

    last_message = callback.message.message_id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message)

    await callback.message.answer(
        f"–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞—Ä–µ–Ω–¥—ã ‚Ññ{rental_id}:",
        reply_markup=keyboard
    )


@dp.callback_query_handler(Text(equals="finish_with_recalculation"), state=ViewRental.View)
async def handle_finish_with_recalculation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    print(data)
    rentals = data['rentals']
    current_index = data['current_index']
    rental = rentals[current_index]
    rental_id, segway_name, end_time, deposit_amount_str = rental[0], rental[2], rental[3], rental[6]

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ deposit_amount –∏–∑ —Å—Ç—Ä–æ–∫–∏ –≤ float, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ
    deposit_amount = float(deposit_amount_str)

    # –ü–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –∑–∞ –º–∏–Ω—É—Ç—É –∞—Ä–µ–Ω–¥—ã
    segway_price_info = await get_segway_price(segway_name)
    segway_price_per_10_min = float(segway_price_info[0]) if segway_price_info else 0

    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
    end_time_dt = datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S.%f')
    now_dt = datetime.now()
    unused_time_seconds = max((end_time_dt - now_dt).total_seconds(), 0)
    unused_time_minutes = unused_time_seconds / 60

    # –†–∞—Å—Å—á–∏—Ç–∞—Ç—å —Å—É–º–º—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞
    refund_amount = min(unused_time_minutes * segway_price_per_10_min / 10, deposit_amount)

    # –û–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–∞
    remaining_deposit = deposit_amount - refund_amount
    await finish_rental_recalculate_request(rental_id, remaining_deposit)

    # –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –æ–ø–µ—Ä–∞—Ü–∏–∏
    await callback.message.answer(
        text=f"–ê—Ä–µ–Ω–¥–∞ ‚Ññ{rental_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –ø–µ—Ä–µ—Ä–∞—Å—á–µ—Ç–æ–º. –í–æ–∑–≤—Ä–∞—Ç: {refund_amount:.2f} —Ä—É–±.",
        reply_markup=await generate_main_keyboard(BotConfig.is_admin)
    )
    await state.reset_state()






@dp.callback_query_handler(Text(equals="finish_without_recalculation"), state=ViewRental.View)
async def handle_finish_without_recalculation(callback: CallbackQuery, state: FSMContext):
    await finish_rental(callback, state, recalculate=False)


async def finish_rental(callback: CallbackQuery, state: FSMContext, recalculate: bool):
    data = await state.get_data()
    rentals, current_index = data['rentals'], data['current_index']
    rental_id = rentals[current_index][0]
    current_segway_name = rentals[current_index][2]
    current_end_time = rentals[current_index][4]
    deposit_amount = rentals[current_index][6]

    # Finish the rental request
    if recalculate:
        current_segway_price = await get_segway_price(current_segway_name)
        current_segway_price = current_segway_price[0]
        unused_time_cost = await calculate_unused_time_cost(current_end_time, current_segway_price)

        total_amount = deposit_amount - unused_time_cost
        await finish_rental_recalculate_request(rental_id, total_amount)
    else:
        await finish_rental_request(rental_id)

    last_message = callback.message.message_id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message)

    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await callback.message.answer(
        f"–ê—Ä–µ–Ω–¥–∞ ‚Ññ{rental_id} –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ {'–ø–µ—Ä–µ—Å—á–∏—Ç–∞–Ω–∞' if recalculate else '–∑–∞–≤–µ—Ä—à–µ–Ω–∞'}!",
        reply_markup=main_keyboard
    )
    await state.reset_state()


@dp.callback_query_handler(Text(equals=["extension_rental"]), state=ViewRental.View)
async def extension_rental(callback: CallbackQuery, state: FSMContext):
    await ViewRental.Extension.set()

    last_message = callback.message.message_id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –∞—Ä–µ–Ω–¥—É.")


# Message handler for checking input money
@dp.message_handler(lambda message: not message.text.isdigit(), state=ViewRental.Extension)
async def checking_input_money(message: types.Message):
    return await message.reply("–í—ã –≤–≤–µ–ª–∏ –Ω–µ —á–∏—Å–ª–æ!")


async def calculate_new_end_time(extension_money, equipment_price, end_time):
    price_per_10_minutes = equipment_price / 10
    minutes_available = extension_money / price_per_10_minutes

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '%Y-%m-%d %H:%M:%S.%f' –≤ –æ–±—ä–µ–∫—Ç datetime
    end_time_datetime = datetime.strptime(end_time, '%Y-%m-%d %H:%M:%S.%f')

    extended_datetime = end_time_datetime + timedelta(minutes=minutes_available)
    return extended_datetime, minutes_available


@dp.message_handler(state=ViewRental.Extension)
async def extension_rental(message: types.Message, state: FSMContext):
    extension_money = float(message.text)

    async with state.proxy() as state_data:
        rentals, current_index = state_data.get('rentals', []), state_data.get('current_index', 0)
        rental = rentals[current_index]
        rental_id, end_time, equipment_type = rental[0], rental[4], rental[2]

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ 10 –º–∏–Ω—É—Ç –Ω–∞ —Å–∏–≥–≤–µ–µ equipment_type
        equipment_price = await get_segway_price(equipment_type)
        new_end_time, minutes_available = await calculate_new_end_time(extension_money, equipment_price[0], end_time)

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –≤—Å–µ–≥–æ –ø—Ä–æ–∫–∞—Ç–∞
        total_cost = float(rental[6])

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–æ–Ω–µ—á–Ω–æ–π —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø—Ä–æ–∫–∞—Ç–∞
        new_total_cost = total_cost + extension_money

        await post_extension_rental(rental_id, new_end_time, new_total_cost)

        main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
        await message.answer(f"–ê—Ä–µ–Ω–¥–∞ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–ª–µ–Ω–∞. –ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã: {new_end_time}",
                             reply_markup=main_keyboard)

    await state.finish()


@dp.callback_query_handler(Text(equals=["cancel_rental"]), state=ViewRental.View)
async def describe_cancel(callback: CallbackQuery, state: FSMContext):
    await ViewRental.Cancel_description.set()

    last_message = callback.message.message_id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message)

    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–∫–∞—Ç–∞:")


@dp.message_handler(state=ViewRental.Cancel_description)
async def handle_cancel_rental(message: types.Message, state: FSMContext):
    data = await state.get_data()
    rentals, current_index = data['rentals'], data['current_index']
    rental_id = rentals[current_index][0]
    description = message.text  # Access description from the message

    await cancel_rental(rental_id, description)

    last_message = message.message_id
    await bot.delete_message(chat_id=message.chat.id, message_id=last_message)

    main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
    await message.answer(f"–ê—Ä–µ–Ω–¥–∞ ‚Ññ{rental_id} –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞!", reply_markup=main_keyboard)
    await state.reset_state()


@dp.callback_query_handler(Text(equals="change_rental"), state=ViewRental.View)
async def handle_change_rental(callback: CallbackQuery, state: FSMContext):
    buttons = await get_free_segways()
    keyboard = InlineKeyboardMarkup()

    last_message = callback.message.message_id
    await bot.delete_message(chat_id=callback.message.chat.id, message_id=last_message)

    for segway_id, segway_name, price in buttons:
        button_text = f"{segway_id}. {segway_name} - {price} —Ä—É–±."
        callback_data = f"button_{segway_id}"
        keyboard.add(InlineKeyboardButton(text=button_text, callback_data=callback_data))

    await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å–µ–≥–≤–µ–π:", reply_markup=keyboard)
    await ViewRental.Equipment.set()


@dp.callback_query_handler(lambda callback_query: callback_query.data.startswith('button_'), state=ViewRental.Equipment)
async def process_segway_callback(callback_query: CallbackQuery, state: FSMContext):
    try:
        # –ø–æ–ª—É—á–∏–ª–∏ –∞–π–¥–∏ –Ω–æ–≤–æ–≥–æ —Å–µ–≥–≤–µ—è
        button_id = callback_query.data.replace('button_', '')

        data = await state.get_data()
        current_rental_id = data['rentals'][0][0]
        rental_name = data['rentals'][0][1]
        current_segway_name = data['rentals'][0][2]
        current_end_time = data['rentals'][0][4]


        current_segway_price = await get_segway_price(current_segway_name)
        current_segway_price = current_segway_price[0]

        print(data['rentals'][0])
        print(current_segway_price)

        unused_time_cost = await calculate_unused_time_cost(current_end_time, current_segway_price)
        print(f"–°—Ç–æ–∏–º–æ—Å—Ç—å –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏: {unused_time_cost} —Ä—É–±.")

        new_segway_price_tuple = await get_segway_price_id(button_id)
        new_segway_price = new_segway_price_tuple[0]

        new_end_time = await calculate_new_end_time_change(unused_time_cost, new_segway_price)
        print(f"–ù–æ–≤–æ–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–∫–∞—Ç–∞: {new_end_time}")

        await change_rental_request(current_rental_id, rental_name, new_end_time, 1, unused_time_cost, button_id)

        await callback_query.message.delete()

        main_keyboard = await generate_main_keyboard(BotConfig.is_admin)
        await callback_query.message.answer("–ü—Ä–æ–∫–∞—Ç –±—ã–ª —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω!", reply_markup=main_keyboard)
        await state.reset_state()

    except Exception as e:
        print(f"Error in process_segway_callback: {e}")


async def calculate_unused_time_cost(current_end_time, current_segway_price):
    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ '%Y-%m-%d %H:%M:%S.%f' –≤ –æ–±—ä–µ–∫—Ç datetime
    if isinstance(current_end_time, str):
        current_end_time = datetime.strptime(current_end_time, '%Y-%m-%d %H:%M:%S.%f')

    now = datetime.now()

    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ—Å—Ç–∞–≤—à–µ–≥–æ—Å—è –≤—Ä–µ–º–µ–Ω–∏ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Ç–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –º–µ–Ω—å—à–µ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∞—Ä–µ–Ω–¥—ã
    if now < current_end_time:
        remaining_time = current_end_time - now
        unused_time_minutes = remaining_time.total_seconds() / 60
        unused_time_cost = (unused_time_minutes / 10) * current_segway_price
    else:
        unused_time_cost = 0

    return unused_time_cost



async def calculate_new_end_time_change(unused_time_cost, new_segway_price):
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏, –∫–æ—Ç–æ—Ä–æ–µ –º–æ–∂–Ω–æ –ø—Ä–æ–∫–∞—Ç–∏—Ç—å –Ω–∞ –Ω–æ–≤–æ–º —Å–µ–≥–≤–µ–µ –∑–∞ –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –¥–µ–Ω—å–≥–∏
    new_time_minutes = (unused_time_cost / new_segway_price) * 10

    # –†–∞—Å—á–µ—Ç –Ω–æ–≤–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –æ–∫–æ–Ω—á–∞–Ω–∏—è –ø—Ä–æ–∫–∞—Ç–∞, –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –µ–≥–æ —Ç–µ–∫—É—â–∏–º –≤—Ä–µ–º–µ–Ω–µ–º + 24 —á–∞—Å–∞
    new_end_time = datetime.now() + timedelta(minutes=new_time_minutes)

    return new_end_time
